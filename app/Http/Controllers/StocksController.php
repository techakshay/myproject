<?php

namespace App\Http\Controllers;

use App\User;
use Illuminate\Http\Request;
use App\Item;
use App\stocks;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Session;
use Illuminate\Http\RedirectResponse;
use Yajra\DataTables\Facades\DataTables;
use Yajra\DataTables\Html\Builder;
use TM\Crud\CRUDController;

class StocksController extends CRUDController
{

    public function add(){
        $auto_complete = [];

        //$auto_complete = [];
        $items = [];
        $bill_id = "";
        $customer = [];
        return view("stocks.add", compact('auto_complete', 'items', 'bill_id', 'customer'));
    }

    public function subtract(){

        $auto_complete = [];

        //$auto_complete = [];
        $items = [];
        $bill_id = "";
        $customer = [];
        return view("stocks.subtract", compact('auto_complete', 'items', 'bill_id', 'customer'));
    }

    public function items(){
        return $uniqueProducts = Item::all();

    }

    public function stocks(){
        return view("stocks.datatable");
    }

    public function stocks_data(){


        $query = Item::orderBy('updated_at', 'desc')->get();
        return DataTables::of($query)
            //->setTransformer(new \App\Transformers\ItemsTransformer)
            //->rawColumns(["upload_revision"])
            ->make(true);
    }

    //
    public function init(){

        $this->model = "Stocks";
        $this->model_index = "Items";
        $this->action = "stocks";
        $this->redirect = "/stocks/create"; // /bill/items/1/
        $this->settings['view'] =true; // /bill/items/1/
        $this->views["create"] = "stocks.create";
       // $this->relations = ["item_id"];

    }

    public function create_after($data)
    {
        $invoice_number = session('invoice_number');
        if ($invoice_number) {
            $stocks_data = Stocks::where('invoice_number', $invoice_number)->get();
            $data['stocks_data'] = $stocks_data;
            $data['invoice_number'] = $invoice_number;

        }
        return parent::create_after($data); // TODO: Change the autogenerated stub
    }

    /**
     * Displays datatables front end view
     *
     * @return \Illuminate\View\View
     */
    public function getIndex()
    {
        return view('items.index');
    }

    /**
     * Process datatables ajax request.
     *
     * @return \Illuminate\Http\JsonResponse
     */
    public function anyData()
    {
        return DataTables::of(
                Item::query()->whereRaw("available < min_stock")
            )
            ->setTransformer(new \App\Transformers\OutOfStockTransformer)
            ->make(true);
    }

    public function getBasic()
    {
        return view('datatables.eloquent.basic');
    }

    public function getBasicData()
    {
        /*$stocks = Stocks::select(['id','created_at','updated_at']);

        return DataTables::of($stocks)->make();*/
        $users = User::select(['id', 'name', 'email', 'created_at', 'updated_at']);

        return Datatables::of($users)
            ->editColumn('name', '{{ $name."-name" }}')
            ->make();
    }

    public function data(Builder $builder){

        $this->model = "Stocks";

        $this->dt_keys = [
            "id" => "ID",
            "Medicine" => [
                "name" => "item.label",
                "key" => "item.label"
            ],
            "Dealer" => [
                "name" => "vendor.name",
                "key" => "vendor.name"
            ],
            "batch_no" => "Batch",
            "invoice_number" => "Invoice",
            "exp_date" => "Expiry",
            "quantity" => "Quantity",
            "mrp" => "MRP",
            "dealer_price" => "DP",
            "breakage" => "Breakage",
            "delete" => "Delete"
        ];

        $this->join_tables = ["item","vendor"];

        $data = $this->datatable($builder);
        if (request()->ajax() || 0) {
            return $data;
        }
        $data['layout'] = "layouts.app";
        return view("stocks.index", $data);
    }

    public function out_of_stock()
    {
        return view('datatables.eloquent.basic');
    }

    public function out_of_stock_2(Builder $builder){

        $this->model = "Items";

        $this->dt_keys = [
            "id" => "ID",
            "label" => 'Medicine',
            "hsn_code" => "HSN Code",
            "mfg_code" => "MFG Code"
        ];

        $this->join_tables = [];

        $data = $this->datatable($builder,"out_of_stock");
        if (request()->ajax() || 0) {
            return $data;
        }
        $data['layout'] = "layouts.app";

        return view("stocks.index", $data);
    }

    public function store_before($request){
        //$this->validate(request(), Items::required_fields());
        $invoice_number = $request['invoice_number'];
        session(['invoice_number' => $invoice_number]);
        /*$value = session('invoice_number');
        dd($value);*/
        $item = Item::where('id',$request['item_id'])->first();
        if(isset($item->id)) {
            $item->min_stock = $request['min_stock'];
            $item->save();
        }
        unset($request['min_stock']);
        return $request;


    }

    public function store_after($request, $data, $view){
        Item::add_available($data['item_id'], $data['quantity']);
        return parent::store_after($request, $data, $view);
    }

    public function breakage(){

        $this->relations = ["item_id" => "items"];
        $data= Stocks::where('breakage','>',1)->get();
        return $this->index($data);

    }
    public function invoice_number(){

        session()->forget('invoice_number');
        return redirect()->back();

    }

    public function clear_stocks()
    {

        $stocks = Stocks::get()->toArray();
        foreach ($stocks as $stock) {
            $item_id = $stock['item_id'];

            $items = Item::where('id', $item_id)->get();
            foreach ($items as $item) {

                $item->available = 0;
                $item->save();
            }

        }
        DB::table('stocks')->delete();
    }

    public function destroy($id)
    {
        $stock = Stocks::find($id);

        if(count($stock->rl_bill_items)){
            session()->flash('error', " Stock Can't be deleted");
        } else {
            $stock->delete();
            session()->flash('success', " Stock Deleted successfully");
        }





        //return redirect()->route("stocks.create");
        return redirect()->back();
    }


}